apply plugin: 'com.android.application'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'me.tatarka.retrolambda'

def cfg = rootProject.ext.configuration
def libs = rootProject.ext.libraries

android {

    compileSdkVersion cfg.compileVersion
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {
        applicationId cfg.package
        minSdkVersion cfg.minSdk
        targetSdkVersion cfg.targetSdk
        versionCode cfg.version_code
        versionName cfg.version_name

        resConfig "en"
        buildConfigField "String", "TMDB_API_KEY", "\"${tmdb_api_key}\""

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

//        // Enable the experimental Jack build tools.
//        jackOptions {
//            enabled true
//        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        dexInProcess true
        maxProcessCount 4
        javaMaxHeapSize "3g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }
}


dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:${libs.support}"
    compile "com.android.support:design:${libs.support}"
    compile "com.android.support:recyclerview-v7:${libs.support}"
    compile "com.android.support:cardview-v7:${libs.support}"
    compile "com.android.support:percent:${libs.support}"
    compile "com.android.support:palette-v7:${libs.support}"

    // gson
    compile "com.google.code.gson:gson:${libs.gson}"

    // retrofit
    compile "com.squareup.retrofit2:retrofit:${libs.retrofit}"
    compile "com.squareup.retrofit2:converter-gson:${libs.retrofit}"
    compile "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:${libs.retrofit_adapter}"
    debugCompile "com.squareup.okhttp3:logging-interceptor:${libs.okhttp_logging}"

    // glide
    compile "com.github.bumptech.glide:glide:${libs.glide}"
    compile "com.github.bumptech.glide:okhttp3-integration:${libs.glide_integration}"

// this does not work :-(
// for now we use the original java source files instead
//    compile("com.github.bumptech.glide:recyclerview-integration:${libs.glide_integration}") {
//        // exclude to prevent depends on one or more Android Libraries but is a jar
//        exclude group: 'com.android.support'
//    }

    // glide-transformations
    compile "jp.wasabeef:glide-transformations:${libs.glide_transformations}"

    // rx
    compile "io.reactivex.rxjava2:rxjava:${libs.rxjava2}"
    compile "io.reactivex.rxjava2:rxandroid:${libs.rxjava2}"

    // timber
    compile "com.jakewharton.timber:timber:${libs.timber}"

    // threetenabp
    compile "com.jakewharton.threetenabp:threetenabp:${libs.threetenabp}"

    // butterknife
    compile "com.jakewharton:butterknife:${libs.butterknife}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${libs.butterknife}"

    // leakcanary
    debugCompile "com.squareup.leakcanary:leakcanary-android:${libs.leakcanary}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${libs.leakcanary}"

    // paperparcel
    compile "nz.bradcampbell:paperparcel:${libs.paperparcel}"
    annotationProcessor "nz.bradcampbell:paperparcel-compiler:${libs.paperparcel}"

    // dagger2
    compile "com.google.dagger:dagger:${libs.dagger2}"
    annotationProcessor "com.google.dagger:dagger-compiler:${libs.dagger2}"

    // retrolambda
    retrolambdaConfig 'net.orfjackal.retrolambda:retrolambda:2.4.0'

    //
    // test
    //

    testCompile 'junit:junit:4.12'
}
